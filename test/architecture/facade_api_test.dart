import 'package:flutter_test/flutter_test.dart';

import 'package:ai_providers/ai_providers.dart';

/// üîí Test para validar que SOLO se puede usar AI.* API
/// Este test DEBE FALLAR si alguien intenta exponer AIProviderManager, services, etc.
void main() {
  group('üîí AI-Only Access Validation', () {
    test('‚úÖ Should ONLY export AI class and necessary models', () {
      // ‚úÖ PERMITIDO: AI class debe estar disponible
      expect(AI, isA<Type>());

      // ‚úÖ PERMITIDO: Modelos esenciales para usar AI.*
      expect(AICapability.textGeneration, isA<AICapability>());
      expect(AIResponse, isA<Type>());
      expect(ProviderResponse, isA<Type>());
      expect(VoiceGender.female, isA<VoiceGender>());
      expect(AudioMode.hybrid, isA<AudioMode>());
      expect(VoiceInfo, isA<Type>());
      expect(SynthesisResult, isA<Type>());

      print('‚úÖ AI.* API y modelos necesarios est√°n disponibles');
    });

    test(
        '‚ùå Should NOT export internal managers/services (COMPILE-TIME PROTECTION)',
        () {
      // üö® ESTE TEST VALIDA QUE EL C√ìDIGO NO COMPILE SI SE INTENTA USAR LO PROHIBIDO

      // Si estos tipos estuvieran disponibles, el test fallar√≠a
      // Como NO est√°n exportados, este c√≥digo ni siquiera deber√≠a compilar

      // ‚ùå PROHIBIDO: AIProviderManager
      // expect(AIProviderManager, isA<Type>()); // Esto NO debe compilar

      // ‚ùå PROHIBIDO: Services individuales
      // expect(TextGenerationService, isA<Type>()); // Esto NO debe compilar
      // expect(AudioGenerationService, isA<Type>()); // Esto NO debe compilar
      // expect(ImageGenerationService, isA<Type>()); // Esto NO debe compilar
      // expect(AudioTranscriptionService, isA<Type>()); // Esto NO debe compilar

      // ‚ùå PROHIBIDO: Registry
      // expect(ProviderRegistry, isA<Type>()); // Esto NO debe compilar

      print('‚úÖ Tipos internos NO est√°n exportados (protecci√≥n compile-time)');
    });

    test('üìã Document correct usage patterns', () {
      print('''
üéØ USO CORRECTO - Solo estas llamadas est√°n permitidas:

‚úÖ PERMITIDO:
  
  
  // API Ultra-Limpia
  await AI.text(history, context);
  await AI.speak('¬°Hola!');
  await AI.image('Un gato espacial'); 
  await AI.listen(audioFile);

‚ùå PROHIBIDO (YA NO COMPILA):
  
  
  // Acceso directo a internals - COMPILE ERROR
  final manager = AIProviderManager.instance; 
  final service = TextGenerationService();
  final registry = ProviderRegistry.instance;

üîí RESULTADO: API completamente restringida a AI.*
''');

      expect(true, isTrue, reason: 'Documentation test');
    });

    test('üéØ Validate AI.* methods exist and are callable', () {
      // Verificamos que los m√©todos AI.* existen sin llamarlos realmente
      // (evitamos errores de inicializaci√≥n en tests)

      expect(AI.text, isA<Function>());
      expect(AI.speak, isA<Function>());
      expect(AI.image, isA<Function>());
      expect(AI.listen, isA<Function>());
      expect(AI.generate, isA<Function>());

      print('‚úÖ Todos los m√©todos AI.* est√°n disponibles');
    });
  });
}
